#!/bin/bash

# Functions:
checkExitCode() {
EC=$?

if [ ${EC} -ne 0 ]; then
	echo "Error"
    exit ${EC};
fi
}

#Check if a file is zipped:
SSV_INPUTS=""
checkZipFile() {
	INPUTS="$1"
	echo $INPUTS
	#Check if the input file is empty
	FILE_ZIP_CHECK=`file $INPUTS | grep "Zip"`
	echo $FILE_ZIP_CHECK
	if [[ -z $FILE_ZIP_CHECK ]]; then
	    SSV_INPUTS=$INPUTS
	    echo cp $INPUTS $PWD
	    cp $INPUTS $PWD
	else 
		# Take a zipped input file containing a collection of mzML files and get a space-sep list -> very hacky.
		SSV_INPUTS=`$ZIP_HOME/unzip -Z1 $INPUTS | tr "\n" " "`
		# Extracting the file-collection from zipped input file
		$ZIP_HOME/unzip $INPUTS
		checkExitCode
	fi
}


BASEDIR=`dirname $0`
if [ $# -lt 1 ]; then echo "Error No inputs provided" && exit 1; fi

NINPUTS=6
NPARAMS=0
NOUTPUTS=3

. $BASEDIR/io.sh ${NINPUTS} ${NPARAMS} ${NOUTPUTS} "$@"

echo "" > $OUTPUTS2
SSV_INPUTS1=""
SSV_INPUTS2=""

#INPUTS1_ARRAY=(${INPUTS1[@]})
INPUTS2_ARRAY=(${INPUTS2[@]}) # should be the same size as inputs1
# Read in sample names from the file and store in an array
SAMPLE_IDS=`paste -s -d " " $INPUTS6`
SAMPLE_IDS_ARRAY=(${SAMPLE_IDS[@]})


# Process INPUTS1 and INPUTS2 separately
for ONE_INPUT_FILE in $INPUTS1
	do
		checkZipFile $ONE_INPUT_FILE >> $OUTPUTS3
		SSV_INPUTS1="$SSV_INPUTS1 $SSV_INPUTS"	
	done 

for (( i=0; i<${#INPUTS2_ARRAY[@]}; i++ ))
	do
		#ONE_INPUT_FILE=${INPUTS1_ARRAY[$i]}
		ONE_PEP_FILE=${INPUTS2_ARRAY[$i]}
		SAMPLE_ID=${SAMPLE_IDS_ARRAY[$i]}
		
		echo "PepFile :" $i $ONE_PEP_FILE >> $OUTPUTS3
		echo "SampleID :" $i $SAMPLE_ID >> $OUTPUTS3
		
		#checkZipFile $ONE_INPUT_FILE >> $OUTPUTS3
		#SSV_INPUTS1="$SSV_INPUTS1 $SSV_INPUTS"
		
		
		checkZipFile $ONE_PEP_FILE >> $OUTPUTS3
		SSV_INPUTS2="$SSV_INPUTS2 $SSV_INPUTS"
		
		# Get the basenames of each pepXML file for grouping later
		LIST_BASENAME=$(grep -ohP 'search_summary base_name="\K[^"]*' $SSV_INPUTS)
		# Create the sample grouping file for input file(s)
		SAMPLEGROUP_FILE="SampleGrouping"$i
		echo $LIST_BASENAME > $SAMPLEGROUP_FILE
		sed -i -e "s/^/\/$SAMPLE_ID\t/" $SAMPLEGROUP_FILE
	done

IDPAssembly_PARAMS=$(paste -s -d " " $INPUTS3)
cat SampleGrouping* > PARAMFILE3
cat PARAMFILE3 >> $OUTPUTS3
IDPAssembly_PARAMS="${IDPAssembly_PARAMS} -AssignSourceHierarchy PARAMFILE3"
checkExitCode


# Merge idpDB files to idpDB file
TSV_CHECK=`grep "absent" $INPUTS4`
if [[ -z $TSV_CHECK ]]; then
	IDPAssembly_PARAMS="${IDPAssembly_PARAMS} -IsobaricSampleMapping $INPUTS4"
	echo $IDPAssembly_PARAMS
    checkExitCode
else
	echo "No Isobaric Sample Mapping file for the input data"
fi

FILE_COUNT=`echo "$SSV_INPUTS1" | wc -w`
if [[ $FILE_COUNT > 1 ]]; then
	echo $BSHOOT_HOME/idpAssemble $SSV_INPUTS1 $IDPAssembly_PARAMS -MergedOutputFilepath merged_pep.idpDB
	$BSHOOT_HOME/idpAssemble $SSV_INPUTS1 $IDPAssembly_PARAMS -MergedOutputFilepath merged_pep.idpDB >> $OUTPUTS3
	checkExitCode
else
	cp $SSV_INPUTS1 merged_pep.idpDB
	echo $BSHOOT_HOME/idpAssemble merged_pep.idpDB $IDPAssembly_PARAMS
	$BSHOOT_HOME/idpAssemble merged_pep.idpDB $IDPAssembly_PARAMS >> $OUTPUTS3
	checkExitCode
fi

zip -r $OUTPUTS1.zip $SSV_INPUTS2
mv $OUTPUTS1.zip $OUTPUTS1
mv merged_pep.idpDB $OUTPUTS2

checkExitCode
